// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;

import edu.wpi.first.wpilibj2.command.SubsystemBase;
import frc.robot.constants.Devices;

import com.ctre.phoenix6.configs.TalonFXConfiguration;
import com.ctre.phoenix6.controls.DutyCycleOut;

// import com.ctre.phoenix.motorcontrol.ControlMode;
// import com.ctre.phoenix.motorcontrol.NeutralMode;

// import com.ctre.phoenix.motorcontrol.can.WPI_TalonFX;
import com.ctre.phoenix6.hardware.TalonFX;
import com.ctre.phoenix6.signals.InvertedValue;
import com.ctre.phoenix6.signals.NeutralModeValue;

/**
 *
 */
public class Intake extends SubsystemBase {


    private TalonFX intakeMotor;
    private TalonFXConfiguration intakeMotorConfigs;
    private DutyCycleOut manualControlRequest;
   
    private boolean intakeDeployed = false;

    private int dashboardCounter = 0;

    private boolean intakeCommanded = false;                 // Did driver request intake running
    private double speedCommanded = 0;                       // Requested speed

    public Intake() {

        intakeMotor = new TalonFX(Devices.CANDeviceAddress.Intake.id);
        intakeMotorConfigs = new TalonFXConfiguration();
        manualControlRequest = new DutyCycleOut(0.0);

        intakeMotor.setNeutralMode(NeutralModeValue.Brake);

        this.buildMotorConfigs();
        this.applyMotorConfigs();

        // intakeMotor.setInverted(false);
        // intakeMotor.setStatusFramePeriod(1, 255);
        // this.intakeMotor.getPosition().setUpdateFrequency(1000.0/255.0); // <--- Phoenix 6 version of above line
        // intakeMotor.setStatusFramePeriod(2, 254);
        // intakeMotor.setStatusFramePeriod(3, 253);
        // intakeMotor.setStatusFramePeriod(4, 252);
        // intakeMotor.setStatusFramePeriod(8, 251);
        // intakeMotor.setStatusFramePeriod(10, 250);
        // intakeMotor.setStatusFramePeriod(12, 249);
        // intakeMotor.setStatusFramePeriod(13, 248);
        // intakeMotor.setStatusFramePeriod(14, 247);
        // intakeMotor.setStatusFramePeriod(21, 246);
        addChild("Intake Motor", intakeMotor);
    }

    private void buildMotorConfigs() {
      this.intakeMotorConfigs.MotorOutput.Inverted = InvertedValue.CounterClockwise_Positive;
    }

    private void applyMotorConfigs() {
      this.intakeMotor.getConfigurator().apply(this.intakeMotorConfigs);
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run
        // if (++dashboardCounter >= 5) {
        //     // SmartDashboard.putNumber("Intake Motor Speed", speedCommanded);
        //     // SmartDashboard.putBoolean("Intake Commanded", intakeCommanded);
        //     dashboardCounter = 0;
        // }

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    public boolean getIntakePosition() {
        return intakeDeployed;
    }

    public void setIntakeSpeed(double speed) {
        // intakeMotor.set(ControlMode.PercentOutput, speed);
        intakeMotor.setControl(manualControlRequest.withOutput(speed));
    }

    public void setIntakeCommanded (boolean commanded) {
        intakeCommanded = commanded;
    }

    public boolean getIntakeCommanded () {
        return intakeCommanded;
    }

    public double getSpeedCommanded() {
        return speedCommanded;
    }

    public void setSpeedCommanded(double speedCommanded) {
        this.speedCommanded = speedCommanded;
    }

    public void reset() {
        setIntakeCommanded(false);
        setSpeedCommanded(0.0);
    }
}