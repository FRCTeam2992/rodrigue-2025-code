// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;

import frc.robot.constants.Devices;
import frc.robot.constants.ShooterConstants;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

import com.ctre.phoenix6.configs.TalonFXConfiguration;
import com.ctre.phoenix6.controls.DutyCycleOut;
import com.ctre.phoenix6.controls.Follower;
import com.ctre.phoenix6.controls.VelocityDutyCycle;
// import com.ctre.phoenix.motorcontrol.can.WPI_TalonFX;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix6.hardware.TalonFX;
import com.ctre.phoenix6.signals.InvertedValue;
import com.ctre.phoenix6.signals.NeutralModeValue;

/**
 *
 */
public class Shooter extends SubsystemBase {
  // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

  // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

  private double mainShooterSetRPM = ShooterConstants.defaultMainShooterSpeed;
  private double secondaryShooterSetRPM = ShooterConstants.defaultSecondaryShooterSpeed;
  private boolean shooterCommanded = false;

  private int dashboardCounter = 0;

  // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
  private TalonFX mainShooterLead;
  private TalonFXConfiguration mainShooterLeadConfig;
  private TalonFX mainShooterFollow;
  private TalonFXConfiguration mainShooterFollowConfig;
  private Follower followLeadMotor;
  private TalonFX secondaryShooterLead;
  private TalonFXConfiguration secondaryShooterLeadConfig;

  private DutyCycleOut manualControlRequest;
  private VelocityDutyCycle velocityControlRequest;
  // private WPI_VictorSPX secondaryShooterFollow;

  // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

  /**
  *
  */
  public Shooter() {
    mainShooterLead = new TalonFX(Devices.CANDeviceAddress.ShooterFlywheelLeader.id);
    mainShooterLeadConfig = new TalonFXConfiguration();

    // mainShooterLead.setInverted(true);
    // mainShooterLead.setNeutralMode(NeutralMode.Coast);
    // mainShooterLead.configSupplyCurrentLimit(new SupplyCurrentLimitConfiguration(true, 40.0, 60.0, 0.1));
    // mainShooterLead.config_kP(0, Constants.shooterPIDMainP);
    // mainShooterLead.config_kI(0, Constants.shooterPIDMainI);
    // mainShooterLead.config_kD(0, Constants.shooterPIDMainD);
    // mainShooterLead.config_kF(0, Constants.shooterPIDMainF);
    addChild("mainShooterLead", mainShooterLead);

    mainShooterFollow = new TalonFX(Devices.CANDeviceAddress.ShooterFlywheelFollower.id);
    mainShooterFollowConfig = new TalonFXConfiguration();
    followLeadMotor = new Follower(Devices.CANDeviceAddress.ShooterFlywheelLeader.id, true);

    // mainShooterFollow.setInverted(false);
    // mainShooterFollow.setNeutralMode(NeutralMode.Coast);
    // mainShooterFollow.configSupplyCurrentLimit(new SupplyCurrentLimitConfiguration(true, 40.0, 60.0, 0.1));
    // mainShooterFollow.follow(mainShooterLead);
    // mainShooterFollow.config_kP(0, Constants.shooterPIDSecondaryP);
    // mainShooterFollow.config_kI(0, Constants.shooterPIDSecondaryI);
    // mainShooterFollow.config_kD(0, Constants.shooterPIDSecondaryD);
    // mainShooterFollow.config_kF(0, Constants.shooterPIDSecondaryF);
    addChild("mainShooterFollow", mainShooterFollow);

    secondaryShooterLead = new TalonFX(Devices.CANDeviceAddress.ShooterBackspin.id);
    secondaryShooterLeadConfig = new TalonFXConfiguration();

    // secondaryShooterLead.setNeutralMode(NeutralMode.Coast);
    // secondaryShooterLead.setInverted(true);
    // secondaryShooterLead.configSupplyCurrentLimit(new SupplyCurrentLimitConfiguration(true, 40.0, 60.0, .25));
    addChild("secondaryShooterLead", secondaryShooterLead);
   
    manualControlRequest = new DutyCycleOut(0.0);
    velocityControlRequest = new VelocityDutyCycle(0.0);
  }

  private void buildMotorConfigs() {
    mainShooterLeadConfig.MotorOutput.Inverted = InvertedValue.Clockwise_Positive;
    mainShooterLeadConfig.MotorOutput.NeutralMode = NeutralModeValue.Coast;
    mainShooterLeadConfig.CurrentLimits.SupplyCurrentLimit = 40.0;
    mainShooterLeadConfig.CurrentLimits.SupplyCurrentLowerLimit = 60.0;
    mainShooterLeadConfig.CurrentLimits.SupplyCurrentLowerTime = 0.1;
    mainShooterLeadConfig.CurrentLimits.SupplyCurrentLimitEnable = true;
    mainShooterLeadConfig.Slot0.kP = ShooterConstants.shooterPIDMainP;
    mainShooterLeadConfig.Slot0.kI = ShooterConstants.shooterPIDMainI;
    mainShooterLeadConfig.Slot0.kD = ShooterConstants.shooterPIDMainD;
    mainShooterLeadConfig.Slot0.kV = ShooterConstants.shooterPIDMainF;

    // mainShooterFollowConfig.MotorOutput.Inverted = InvertedValue.CounterClockwise_Positive;
    mainShooterFollowConfig.MotorOutput.NeutralMode = NeutralModeValue.Coast;
    mainShooterFollowConfig.CurrentLimits.SupplyCurrentLimit = 40.0;
    mainShooterFollowConfig.CurrentLimits.SupplyCurrentLowerLimit = 60.0;
    mainShooterFollowConfig.CurrentLimits.SupplyCurrentLowerTime = 0.1;
    mainShooterFollowConfig.CurrentLimits.SupplyCurrentLimitEnable = true;
    mainShooterFollowConfig.Slot0.kP = ShooterConstants.shooterPIDSecondaryP;
    mainShooterFollowConfig.Slot0.kI = ShooterConstants.shooterPIDSecondaryI;
    mainShooterFollowConfig.Slot0.kD = ShooterConstants.shooterPIDSecondaryD;
    mainShooterFollowConfig.Slot0.kV = ShooterConstants.shooterPIDSecondaryF;

    secondaryShooterLeadConfig.MotorOutput.NeutralMode = NeutralModeValue.Coast;
    secondaryShooterLeadConfig.MotorOutput.Inverted = InvertedValue.Clockwise_Positive;
    secondaryShooterLeadConfig.CurrentLimits.SupplyCurrentLimit = 40.0;
    secondaryShooterLeadConfig.CurrentLimits.SupplyCurrentLowerLimit = 60.0;
    secondaryShooterLeadConfig.CurrentLimits.SupplyCurrentLowerTime = 0.25;
    secondaryShooterLeadConfig.CurrentLimits.SupplyCurrentLimitEnable = true;
  }

  private void applyMotorConfigs() {
    mainShooterLead.getConfigurator().apply(mainShooterLeadConfig);
    mainShooterFollow.getConfigurator().apply(mainShooterFollowConfig);
    secondaryShooterLead.getConfigurator().apply(secondaryShooterLeadConfig);
  }

  @Override
  public void periodic() {

    mainShooterFollow.setControl(followLeadMotor);
    // Display the Shooter Set Speed and Current RPM
    if (++dashboardCounter >= 5) {
      SmartDashboard.putNumber("Main Shooter Set Speed", mainShooterSetRPM);
      SmartDashboard.putNumber("Main Shooter Current RPM", getMainShooterRPM());

      SmartDashboard.putNumber("Secondary Shooter Set Speed", secondaryShooterSetRPM);
      SmartDashboard.putNumber("Secondary Shooter Current RPM", getSecondaryShooterRPM());

      SmartDashboard.putBoolean("Main Shooter At Speed", atMainShooterRPM());
      SmartDashboard.putBoolean("Secondary Shooter At Speed", atSecondaryShooterRPM());
      SmartDashboard.putBoolean("Shooters at Speed", atShooterRPM());

      dashboardCounter = 0;
    }
  }

  @Override
  public void simulationPeriodic() {
    // This method will be called once per scheduler run when in simulation

  }

  public void setMainShooterPower(double speed) {
    mainShooterLead.setControl(manualControlRequest.withOutput(speed));
  }

  public void setSecondaryShooterPower(double speed) {
    secondaryShooterLead.setControl(manualControlRequest.withOutput(speed));
  }

  public void setMainShooterToTargetRPM() {
    double speed = (mainShooterSetRPM / 600.0) * (ShooterConstants.shooterEncoderPulses * 0.75);
    setMainShooterRawVelocity(speed);
  }

  private void setMainShooterRawVelocity(double velocity) {
    mainShooterLead.setControl(velocityControlRequest.withVelocity(velocity));
  }

  public void setSecondaryShooterToTargetRPM() {
    double speed = (secondaryShooterSetRPM / 600.0) * (ShooterConstants.shooterEncoderPulses);
    setSecondaryShooterRawVelocity(speed);
  }

  private void setSecondaryShooterRawVelocity(double velocity) {
    secondaryShooterLead.setControl(velocityControlRequest.withVelocity(velocity));
  }

  public double getMainShooterRPM() {
    // return (mainShooterLead.getSelectedSensorVelocity() * 600) / (Constants.shooterEncoderPulses * 0.75);
    return (mainShooterLead.getVelocity().getValueAsDouble() * 600) / (ShooterConstants.shooterEncoderPulses * 0.75);
  }

  public double getSecondaryShooterRPM() {
    // return (secondaryShooterLead.getSelectedSensorVelocity() * 600) / (Constants.shooterEncoderPulses);
    return (secondaryShooterLead.getVelocity().getValueAsDouble() * 600) / (ShooterConstants.shooterEncoderPulses);
  }

  public double getMainShooterTargetRPM() {
    return mainShooterSetRPM;
  }

  public void setMainShooterTargetRPM(double mainShooterSetSpeed) {
    this.mainShooterSetRPM = mainShooterSetSpeed;
  }

  public double getSecondaryShooterTargetRPM() {
    return secondaryShooterSetRPM;
  }

  public void setSecondaryShooterTargetRPM(double secondaryShooterSetSpeed) {
    this.secondaryShooterSetRPM = secondaryShooterSetSpeed;
  }

  public boolean atMainShooterRPM() {
    return (Math.abs(getMainShooterTargetRPM() - getMainShooterRPM()) < 200.0);
  }

  public boolean atSecondaryShooterRPM() {
    return (Math.abs(getSecondaryShooterTargetRPM() - getSecondaryShooterRPM()) < 150.0);
  }

  public boolean atShooterRPM() {
    return (atMainShooterRPM() && atSecondaryShooterRPM());
  }

  public boolean isShooterCommanded() {
    return shooterCommanded;
  }

  public void setShooterCommanded(boolean shooterCommanded) {
    this.shooterCommanded = shooterCommanded;
  }

  public void reset() {
    setShooterCommanded(false);
  }
  
}